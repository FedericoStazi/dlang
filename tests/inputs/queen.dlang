let n = 18 in

(* True if the queens in the pair attack each other, false otherwise *)
let attacks p =
  (((fst fst p) = (fst snd p)) ||
  ((snd fst p) = (snd snd p)) ||
  (((fst fst p) - (fst snd p)) = ((snd fst p) - (snd snd p))) ||
  (((fst fst p) - (fst snd p)) = ((snd snd p) - (snd fst p))))
in

(* Check is the configuration of queens is valid *)
let invalid_configuration pos =
  let x = fst pos in
    let attacks_any l =
      if l = ()
      then
        false
      else
        (attacks (x, fst l)) || (attacks_any (snd l))
      end
    in
      attacks_any (snd pos)
    end
  end
in

(* Place a queen in row i *)
let add_queen i =
  fun queens ->
    fun continuation ->
      let try j =
        if n < j then continuation ()
        else if (invalid_configuration ((i, j), queens)) then try (j + 1)
        else if i = n then ((i, j), queens)
        else add_queen (i + 1) ((i, j), queens) (fun u -> try (j + 1) end)
        end end end
      in
        try 1
      end
    end
  end
in

add_queen 1 () (fun u -> () end)

end
end
end
end
